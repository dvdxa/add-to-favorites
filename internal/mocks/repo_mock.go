// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repositories/ports.go

// Package mock_repositories is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/dvdxa/add-to-favorites/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepositoryPort is a mock of UserRepositoryPort interface.
type MockUserRepositoryPort struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryPortMockRecorder
}

// MockUserRepositoryPortMockRecorder is the mock recorder for MockUserRepositoryPort.
type MockUserRepositoryPortMockRecorder struct {
	mock *MockUserRepositoryPort
}

// NewMockUserRepositoryPort creates a new mock instance.
func NewMockUserRepositoryPort(ctrl *gomock.Controller) *MockUserRepositoryPort {
	mock := &MockUserRepositoryPort{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepositoryPort) EXPECT() *MockUserRepositoryPortMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserRepositoryPort) CreateUser(user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserRepositoryPortMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserRepositoryPort)(nil).CreateUser), user)
}

// GetUser mocks base method.
func (m *MockUserRepositoryPort) GetUser(username string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserRepositoryPortMockRecorder) GetUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserRepositoryPort)(nil).GetUser), username)
}

// MockTerminalRepositoryPort is a mock of TerminalRepositoryPort interface.
type MockTerminalRepositoryPort struct {
	ctrl     *gomock.Controller
	recorder *MockTerminalRepositoryPortMockRecorder
}

// MockTerminalRepositoryPortMockRecorder is the mock recorder for MockTerminalRepositoryPort.
type MockTerminalRepositoryPortMockRecorder struct {
	mock *MockTerminalRepositoryPort
}

// NewMockTerminalRepositoryPort creates a new mock instance.
func NewMockTerminalRepositoryPort(ctrl *gomock.Controller) *MockTerminalRepositoryPort {
	mock := &MockTerminalRepositoryPort{ctrl: ctrl}
	mock.recorder = &MockTerminalRepositoryPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTerminalRepositoryPort) EXPECT() *MockTerminalRepositoryPortMockRecorder {
	return m.recorder
}

// AddToFavorites mocks base method.
func (m *MockTerminalRepositoryPort) AddToFavorites(terminalId, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToFavorites", terminalId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToFavorites indicates an expected call of AddToFavorites.
func (mr *MockTerminalRepositoryPortMockRecorder) AddToFavorites(terminalId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToFavorites", reflect.TypeOf((*MockTerminalRepositoryPort)(nil).AddToFavorites), terminalId, userId)
}

// GetDefaultTerminalsList mocks base method.
func (m *MockTerminalRepositoryPort) GetDefaultTerminalsList() ([]domain.Terminal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultTerminalsList")
	ret0, _ := ret[0].([]domain.Terminal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultTerminalsList indicates an expected call of GetDefaultTerminalsList.
func (mr *MockTerminalRepositoryPortMockRecorder) GetDefaultTerminalsList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultTerminalsList", reflect.TypeOf((*MockTerminalRepositoryPort)(nil).GetDefaultTerminalsList))
}

// GetFavoriteTerminalIds mocks base method.
func (m *MockTerminalRepositoryPort) GetFavoriteTerminalIds(userId int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteTerminalIds", userId)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFavoriteTerminalIds indicates an expected call of GetFavoriteTerminalIds.
func (mr *MockTerminalRepositoryPortMockRecorder) GetFavoriteTerminalIds(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteTerminalIds", reflect.TypeOf((*MockTerminalRepositoryPort)(nil).GetFavoriteTerminalIds), userId)
}

// RemoveFromFavoriteTerminal mocks base method.
func (m *MockTerminalRepositoryPort) RemoveFromFavoriteTerminal(terminalID, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromFavoriteTerminal", terminalID, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromFavoriteTerminal indicates an expected call of RemoveFromFavoriteTerminal.
func (mr *MockTerminalRepositoryPortMockRecorder) RemoveFromFavoriteTerminal(terminalID, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromFavoriteTerminal", reflect.TypeOf((*MockTerminalRepositoryPort)(nil).RemoveFromFavoriteTerminal), terminalID, userId)
}
